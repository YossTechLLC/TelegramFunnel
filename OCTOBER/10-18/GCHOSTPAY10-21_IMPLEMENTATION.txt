================================================================================
GCHOSTPAY10-21 IMPLEMENTATION SUMMARY
TelegramFunnel Payment System - October 2025
================================================================================

This document summarizes the implementation of GCHostPay10-21, the new Host
Wallet Payment Service that receives encrypted tokens from GCSplit10-21 and
will execute automated ETH transfers to ChangeNow payin addresses.

================================================================================
TABLE OF CONTENTS
================================================================================
1. Implementation Overview
2. Files Modified
3. Files Created
4. Token Security Specification
5. Integration Flow
6. Deployment Steps
7. Environment Variables
8. Testing Procedures
9. Next Steps

================================================================================
1. IMPLEMENTATION OVERVIEW
================================================================================

**Service Name**: GCHostPay10-21
**Purpose**: Automated ETH payment execution from host wallet to ChangeNow
**Main File**: tphp10-21.py
**Trigger**: Webhook from GCSplit10-21 after ChangeNow transaction creation
**Token Expiration**: 1 minute from creation
**Status**: Phase 1 Complete (Token validation), Phase 2 Pending (ETH transfer)

**Key Features Implemented**:
‚úÖ Cryptographically signed token generation (GCSplit10-21)
‚úÖ Token validation with HMAC-SHA256 signature verification
‚úÖ 1-minute token expiration enforcement
‚úÖ Secure payload extraction (6 fields)
‚úÖ Comprehensive logging with emoji patterns
‚úÖ Health check endpoint
‚úÖ Dockerfile and deployment configuration
‚úÖ Complete documentation

**Phase 2 Requirements** (Not Yet Implemented):
‚è≥ Web3.py integration for ETH transfers
‚è≥ Gas price estimation
‚è≥ Transaction signing with HOST_WALLET_PRIVATE_KEY
‚è≥ Transaction broadcasting to Ethereum network
‚è≥ Transaction confirmation tracking
‚è≥ Database updates with transaction hashes

================================================================================
2. FILES MODIFIED
================================================================================

**File**: GCSplit10-21/config_manager.py
**Changes**:
  - Added TPS_HOSTPAY_SIGNING_KEY environment variable (Line 16)
  - Added HOSTPAY_WEBHOOK_URL environment variable (Line 17)
  - Added tps_hostpay_signing_key instance variable (Line 31)
  - Added hostpay_webhook_url instance variable (Line 32)
  - Added fetch_tps_hostpay_signing_key() method (Lines 123-134)
  - Added fetch_hostpay_webhook_url() method (Lines 136-146)
  - Updated initialize_config() to fetch new secrets (Lines 162-163)
  - Updated config dictionary to include new values (Lines 180-181)
  - Updated configuration logging (Lines 191-192)

**File**: GCSplit10-21/tps10-21.py
**Changes**:
  - Added import statements: struct, base64, requests (Lines 13-15)
  - Added build_hostpay_token() function (Lines 142-235)
    * Binary packing of 6 payload fields
    * HMAC-SHA256 signature generation
    * Base64 URL-safe encoding
    * Comprehensive logging
  - Added trigger_hostpay_webhook() function (Lines 237-317)
    * Configuration retrieval
    * Token generation
    * HTTP POST request to GCHostPay10-21
    * Error handling with timeout/connection errors
  - Added webhook trigger call after split_payout_que insertion (Lines 426-441)
    * Triggers only after successful database insertion
    * Non-fatal error handling
    * Detailed logging of trigger status

**Summary**: Modified 2 files with backward-compatible changes

================================================================================
3. FILES CREATED
================================================================================

**Directory**: GCHostPay10-21/
**Created**: New service directory

**File**: GCHostPay10-21/tphp10-21.py (370 lines)
**Purpose**: Main webhook application
**Key Functions**:
  - fetch_secret(): Generic Secret Manager fetcher
  - fetch_tps_hostpay_signing_key(): Signing key retriever
  - fetch_host_wallet_address(): Wallet address retriever (future use)
  - fetch_host_wallet_private_key(): Private key retriever (future use)
  - decode_and_verify_hostpay_token(): Token decryption and validation
  - hostpay_webhook(): Main POST / endpoint
  - health_check(): GET /health endpoint

**File**: GCHostPay10-21/Dockerfile (26 lines)
**Purpose**: Docker container configuration
**Base Image**: python:3.11-slim
**Exposed Port**: 8080
**Entrypoint**: python tphp10-21.py

**File**: GCHostPay10-21/requirements.txt (3 lines)
**Dependencies**:
  - Flask==3.0.3
  - google-cloud-secret-manager==2.16.3
  - requests==2.31.0

**File**: GCHostPay10-21/.dockerignore (30 lines)
**Purpose**: Exclude unnecessary files from Docker build

**File**: GCHostPay10-21/README.md (573 lines)
**Purpose**: Comprehensive deployment and usage documentation
**Sections**:
  - Overview and architecture
  - Token security specifications
  - Payload field descriptions
  - Environment variables
  - Deployment instructions
  - API endpoint documentation
  - Integration flow
  - Logging patterns
  - Testing procedures
  - Troubleshooting guide
  - Next steps for Phase 2

**Summary**: Created 5 new files in new service directory

================================================================================
4. TOKEN SECURITY SPECIFICATION
================================================================================

**Signing Key**:
  Name: TPS_HOSTPAY_SIGNING_KEY
  Value: 6b5f0a6e6dca94b1e5d9b1f018f4c8a9e7fe4b0ecfc6e8b29bd2d19f7937df5a
  Location: Google Cloud Secret Manager
  Path: projects/291176869049/secrets/TPS_HOSTPAY_SIGNING_KEY/versions/latest
  Shared Between: GCSplit10-21 (generator) and GCHostPay10-21 (validator)

**Token Format** (Binary Packed):
  [16 bytes] unique_id (UTF-8, fixed length, null-padded if shorter)
  [1 byte]   cn_api_id length
  [N bytes]  cn_api_id data (UTF-8 encoded)
  [1 byte]   from_currency length
  [N bytes]  from_currency data (UTF-8 encoded, lowercase)
  [1 byte]   from_network length
  [N bytes]  from_network data (UTF-8 encoded, lowercase)
  [8 bytes]  from_amount (big-endian double precision float)
  [1 byte]   payin_address length
  [N bytes]  payin_address data (UTF-8 encoded)
  [4 bytes]  timestamp (big-endian uint32, unix timestamp)
  [16 bytes] HMAC-SHA256 signature (truncated to first 16 bytes)

**Encoding**: Base64 URL-safe without padding (= characters stripped)

**Expiration Logic**:
  Valid Window: current_time - 60 <= timestamp <= current_time + 5
  Grace Period: 5 seconds for clock skew
  Maximum Age: 60 seconds from creation

**Signature Algorithm**:
  1. Pack all data fields into binary format
  2. Generate HMAC-SHA256 signature using signing key
  3. Truncate signature to first 16 bytes
  4. Append signature to packed data
  5. Base64 URL-safe encode final data
  6. Strip padding characters

**Validation Algorithm**:
  1. Base64 URL-safe decode token
  2. Split data and signature (last 16 bytes)
  3. Re-generate HMAC-SHA256 signature from data
  4. Compare truncated signatures using constant-time comparison
  5. Check timestamp expiration
  6. Extract all 6 payload fields

================================================================================
5. INTEGRATION FLOW
================================================================================

Complete end-to-end flow:

[1] User completes subscription payment
    ‚Üì
[2] GCWebhook10-16 (tph10-16) processes success redirect
    ‚Üì
[3] tph10-16 triggers GCSplit10-21 (tps10-21) webhook
    ‚Üì
[4] tps10-21 calculates adjusted amount (minus TP flat fee)
    ‚Üì
[5] tps10-21 calls ChangeNow API for conversion estimate
    ‚Üì
[6] tps10-21 inserts record into split_payout_request table
    - Generates unique_id (16-char alphanumeric)
    - Stores estimate data
    ‚Üì
[7] tps10-21 creates ChangeNow fixed-rate transaction
    - Receives transaction details from ChangeNow API
    - Extracts: cn_api_id, from_currency, from_network, from_amount, payin_address
    ‚Üì
[8] tps10-21 inserts record into split_payout_que table
    - Links to split_payout_request via unique_id
    - Stores all ChangeNow transaction details
    ‚Üì
[9] ‚ú® NEW: tps10-21 generates HostPay token
    - Packs 6 fields: unique_id, cn_api_id, from_currency, from_network, from_amount, payin_address
    - Signs with TPS_HOSTPAY_SIGNING_KEY
    - Adds current timestamp
    - Base64 URL-safe encodes
    ‚Üì
[10] ‚ú® NEW: tps10-21 triggers GCHostPay10-21 webhook
    - POST request with token in JSON body
    - 30-second timeout
    - Non-fatal if webhook fails
    ‚Üì
[11] ‚ú® NEW: GCHostPay10-21 receives webhook
    - Validates token signature
    - Checks token expiration (1-minute window)
    - Extracts all 6 payload fields
    - Logs all extracted values
    ‚Üì
[12] üöß FUTURE: GCHostPay10-21 executes ETH transfer
    - Connects to Web3 provider
    - Builds ETH transaction to payin_address
    - Signs with HOST_WALLET_PRIVATE_KEY
    - Broadcasts to Ethereum network
    - Waits for confirmation
    - Updates database with transaction hash

================================================================================
6. DEPLOYMENT STEPS
================================================================================

**STEP 1: Create Secrets in Google Cloud Secret Manager**

# Create TPS HostPay signing key
echo -n "6b5f0a6e6dca94b1e5d9b1f018f4c8a9e7fe4b0ecfc6e8b29bd2d19f7937df5a" | \
  gcloud secrets create TPS_HOSTPAY_SIGNING_KEY \
    --data-file=-

# Verify secret creation
gcloud secrets versions access latest --secret="TPS_HOSTPAY_SIGNING_KEY"

# Create host wallet address (placeholder - replace with actual address)
echo -n "YOUR_ETH_WALLET_ADDRESS" | \
  gcloud secrets create HOST_WALLET_ETH_ADDRESS \
    --data-file=-

# Create host wallet private key (placeholder - replace with actual key)
echo -n "YOUR_PRIVATE_KEY" | \
  gcloud secrets create HOST_WALLET_PRIVATE_KEY \
    --data-file=-


**STEP 2: Deploy GCHostPay10-21 to Google Cloud Run**

cd /path/to/TelegramFunnel/OCTOBER/10-18/GCHostPay10-21

gcloud run deploy tphp10-21 \
    --source . \
    --region us-central1 \
    --platform managed \
    --allow-unauthenticated \
    --memory 512Mi \
    --cpu 1 \
    --timeout 60 \
    --max-instances 10 \
    --min-instances 0 \
    --port 8080 \
    --set-env-vars TPS_HOSTPAY_SIGNING_KEY=projects/291176869049/secrets/TPS_HOSTPAY_SIGNING_KEY/versions/latest \
    --set-env-vars HOST_WALLET_ETH_ADDRESS=projects/291176869049/secrets/HOST_WALLET_ETH_ADDRESS/versions/latest \
    --set-env-vars HOST_WALLET_PRIVATE_KEY=projects/291176869049/secrets/HOST_WALLET_PRIVATE_KEY/versions/latest

**Expected Output**:
Service [tphp10-21] deployed to:
https://tphp10-21-XXXXX-uc.a.run.app

**IMPORTANT**: Copy the service URL for the next step!


**STEP 3: Create HOSTPAY_WEBHOOK_URL Secret**

# Replace XXXXX with actual service hash from Step 2
echo -n "https://tphp10-21-XXXXX-uc.a.run.app" | \
  gcloud secrets create HOSTPAY_WEBHOOK_URL \
    --data-file=-


**STEP 4: Update GCSplit10-21 with New Environment Variables**

gcloud run services update tps10-21 \
    --region us-central1 \
    --update-env-vars TPS_HOSTPAY_SIGNING_KEY=projects/291176869049/secrets/TPS_HOSTPAY_SIGNING_KEY/versions/latest \
    --update-env-vars HOSTPAY_WEBHOOK_URL=projects/291176869049/secrets/HOSTPAY_WEBHOOK_URL/versions/latest


**STEP 5: Verify Deployments**

# Test GCHostPay10-21 health check
curl https://tphp10-21-XXXXX-uc.a.run.app/health

Expected Response:
{
  "status": "healthy",
  "service": "GCHostPay10-21 Host Wallet Payment Service",
  "timestamp": 1234567890,
  "configuration": {
    "signing_key": "‚úÖ"
  }
}

# Check GCSplit10-21 logs for configuration
gcloud run services logs read tps10-21 --region us-central1 --limit 20

Look for:
‚úÖ [CONFIG] Successfully fetched TPS HostPay signing key
‚úÖ [CONFIG] Successfully fetched HostPay webhook URL
   TPS HostPay Signing Key: ‚úÖ
   HostPay Webhook URL: ‚úÖ

================================================================================
7. ENVIRONMENT VARIABLES
================================================================================

**GCSplit10-21 (tps10-21) - New Variables**:
  TPS_HOSTPAY_SIGNING_KEY (Secret Manager Path)
    - Purpose: Sign HostPay tokens
    - Value: projects/291176869049/secrets/TPS_HOSTPAY_SIGNING_KEY/versions/latest

  HOSTPAY_WEBHOOK_URL (Secret Manager Path)
    - Purpose: URL of GCHostPay10-21 service
    - Value: projects/291176869049/secrets/HOSTPAY_WEBHOOK_URL/versions/latest

**GCHostPay10-21 (tphp10-21) - All Variables**:
  TPS_HOSTPAY_SIGNING_KEY (Secret Manager Path)
    - Purpose: Verify token signatures
    - Value: projects/291176869049/secrets/TPS_HOSTPAY_SIGNING_KEY/versions/latest

  HOST_WALLET_ETH_ADDRESS (Secret Manager Path)
    - Purpose: Host wallet public address
    - Value: projects/291176869049/secrets/HOST_WALLET_ETH_ADDRESS/versions/latest
    - Status: Placeholder for Phase 2

  HOST_WALLET_PRIVATE_KEY (Secret Manager Path)
    - Purpose: Sign ETH transactions
    - Value: projects/291176869049/secrets/HOST_WALLET_PRIVATE_KEY/versions/latest
    - Status: Placeholder for Phase 2
    - Security: NEVER log or expose this value

**Total New Secrets**: 3
**Services Updated**: 2 (GCSplit10-21, GCHostPay10-21)

================================================================================
8. TESTING PROCEDURES
================================================================================

**Test 1: Health Check**
Command:
  curl https://tphp10-21-XXXXX-uc.a.run.app/health

Expected:
  ‚úÖ Status 200
  ‚úÖ "status": "healthy"
  ‚úÖ "signing_key": "‚úÖ"


**Test 2: End-to-End Integration Test**
Steps:
  1. Make a test subscription payment through TelePay10-16
  2. Complete payment via NowPayments
  3. Monitor GCWebhook10-16 logs for successful invite send
  4. Monitor GCSplit10-21 logs for:
     - ChangeNow transaction creation
     - Token generation: "üîê [HOSTPAY_TOKEN] Building HostPay webhook token"
     - Webhook trigger: "üöÄ [HOSTPAY_WEBHOOK] Triggering GCHostPay10-21 webhook"
     - Success: "‚úÖ [HOSTPAY_WEBHOOK] Webhook triggered successfully"
  5. Monitor GCHostPay10-21 logs for:
     - Webhook received: "üéØ [HOSTPAY_WEBHOOK] Webhook called"
     - Token validated: "üîì [TOKEN_VALIDATION] Token validated successfully"
     - Extracted values displayed with emoji prefixes

Expected Log Output (GCHostPay10-21):
  üéØ [HOSTPAY_WEBHOOK] Webhook called
  üì¶ [HOSTPAY_WEBHOOK] Received token (length: 156 chars)
  üîê [CONFIG] Fetching TPS HostPay signing key
  ‚úÖ [CONFIG] Successfully fetched TPS HostPay signing key
  üîì [TOKEN_VALIDATION] Token validated successfully
  ‚è∞ [TOKEN_VALIDATION] Token age: 3 seconds
  ‚úÖ [HOSTPAY_WEBHOOK] Token validated and decoded successfully

  üì¶ [HOSTPAY_WEBHOOK] Extracted values:
     üÜî unique_id: ABCD1234EF567890
     üÜî cn_api_id: abc123xyz789
     üí∞ from_currency: eth
     üåê from_network: eth
     üí∏ from_amount: 0.005
     üè¶ payin_address: 0x1234567890abcdef...

  ‚ö†Ô∏è [HOSTPAY_WEBHOOK] ETH transfer not yet implemented


**Test 3: Token Expiration Test**
Manually create an old token and verify rejection:
  - Generate token with timestamp - 120 seconds
  - POST to webhook endpoint
  - Expect 400 error: "Token expired"


**Test 4: Signature Tampering Test**
Modify a valid token and verify rejection:
  - Get a valid token
  - Change one character
  - POST to webhook endpoint
  - Expect 400 error: "Signature mismatch"

================================================================================
9. NEXT STEPS
================================================================================

**Immediate (Post-Deployment)**:
  ‚òê Deploy GCHostPay10-21 to Google Cloud Run
  ‚òê Create all required secrets in Secret Manager
  ‚òê Update GCSplit10-21 with new environment variables
  ‚òê Run end-to-end integration test
  ‚òê Verify all logging is working correctly
  ‚òê Monitor for any errors in Cloud Run logs

**Phase 2: ETH Transfer Implementation** (Future):
  ‚òê Add web3.py to requirements.txt
  ‚òê Implement Web3 provider connection (Infura/Alchemy)
  ‚òê Implement gas price estimation function
  ‚òê Implement ETH transaction building
  ‚òê Implement transaction signing with private key
  ‚òê Implement transaction broadcasting
  ‚òê Implement confirmation tracking
  ‚òê Add database update with transaction hash
  ‚òê Add error handling for failed transactions
  ‚òê Add retry logic for network issues
  ‚òê Add monitoring and alerting
  ‚òê Test on testnet first (Goerli/Sepolia)

**Phase 3: Advanced Features** (Future):
  ‚òê Wallet balance monitoring
  ‚òê Gas cost optimization
  ‚òê Transaction queue management
  ‚òê Multi-signature wallet support
  ‚òê Automated wallet refilling
  ‚òê Transaction cost reporting
  ‚òê Integration with analytics dashboard

================================================================================
10. TROUBLESHOOTING
================================================================================

**Issue**: "Configuration error: signing key not available"
Fix:
  - Verify TPS_HOSTPAY_SIGNING_KEY is set in Cloud Run
  - Check Secret Manager permissions for service account
  - Run: gcloud secrets versions access latest --secret="TPS_HOSTPAY_SIGNING_KEY"

**Issue**: "Signature mismatch"
Fix:
  - Verify same signing key in GCSplit10-21 and GCHostPay10-21
  - Check for typos in secret value
  - Ensure both services reference same Secret Manager path

**Issue**: "Token expired"
Fix:
  - Check system clocks are synchronized
  - Verify webhook is triggered immediately after token generation
  - Check network latency between services

**Issue**: "HostPay webhook trigger failed"
Fix:
  - Verify HOSTPAY_WEBHOOK_URL is correct in GCSplit10-21
  - Check GCHostPay10-21 service is running
  - Review GCHostPay10-21 logs for errors
  - Test health endpoint: curl https://tphp10-21-XXXXX-uc.a.run.app/health

**Issue**: "Invalid token: too small"
Fix:
  - Verify all 6 fields are included in token generation
  - Check token encoding is URL-safe Base64
  - Review token packing logic in build_hostpay_token()

================================================================================
11. MONITORING COMMANDS
================================================================================

# View GCHostPay10-21 logs
gcloud run services logs read tphp10-21 --region us-central1 --limit 50

# View GCSplit10-21 logs (for token generation)
gcloud run services logs read tps10-21 --region us-central1 --limit 50

# Describe GCHostPay10-21 service
gcloud run services describe tphp10-21 --region us-central1

# List all environment variables
gcloud run services describe tphp10-21 \
    --region us-central1 \
    --format="value(spec.template.spec.containers[0].env)"

# Update environment variable
gcloud run services update tphp10-21 \
    --region us-central1 \
    --update-env-vars KEY=VALUE

================================================================================
END OF IMPLEMENTATION SUMMARY
================================================================================

Generated: October 2025
Version: 10-21
Services: GCHostPay10-21, GCSplit10-21
Status: Phase 1 Complete - Token generation and validation working

For detailed API documentation, see: GCHostPay10-21/README.md
For deployment commands, see: GOOGLE_CLOUD_RUN_DEPLOYMENT.txt

================================================================================
