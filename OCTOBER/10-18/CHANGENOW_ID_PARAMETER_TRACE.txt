================================================================================
CHANGENOW API 'ID' PARAMETER SOURCE TRACE
TelegramFunnel Payment System - October 2025
================================================================================

This document traces the source and flow of the 'id' parameter that appears in
ChangeNow API responses throughout the TPS10-21 payment splitting service.

================================================================================
EXECUTIVE SUMMARY
================================================================================

The 'id' parameter DOES NOT originate from the codebase.
It is GENERATED AND RETURNED by the ChangeNow API after transaction creation.

Source: ChangeNow API (External Service)
Endpoint: POST /v2/exchange
Response Field: transaction.id
Usage: Transaction tracking and reference

================================================================================
DETAILED TRACE: COMPLETE FLOW
================================================================================

STEP 1: Payment Success Redirect (tph10-16.py)
-----------------------------------------------
Location: GCWebhook10-16/tph10-16.py
Trigger: User completes payment via NowPayments

Flow:
1. User's browser hits: https://tph10-16.../? token=SIGNED_TOKEN
2. Token is decoded (lines 542-547):
   - Extracts: user_id, closed_channel_id, wallet_address, payout_currency,
               subscription_time_days, subscription_price

3. Database record created (lines 559-578)

4. Telegram invite sent (lines 581-598)

5. Payment split webhook triggered (lines 600-616):
   Function: trigger_payment_split_webhook()
   Location: Lines 434-515

STEP 2: Payment Split Webhook Call (tph10-16.py)
-------------------------------------------------
Location: GCWebhook10-16/tph10-16.py:434-515
Function: trigger_payment_split_webhook()

Webhook Payload Created (lines 458-465):
{
    "user_id": user_id,                    # FROM: Decoded token
    "closed_channel_id": closed_channel_id, # FROM: Decoded token
    "wallet_address": wallet_address,       # FROM: Decoded token
    "payout_currency": payout_currency,     # FROM: Decoded token
    "sub_price": subscription_price,        # FROM: Decoded token
    "timestamp": int(time.time())           # FROM: Current time
}

HTTP Request (lines 487-492):
POST to: TPS_WEBHOOK_URL (tps10-21 service)
Headers: Content-Type, X-Webhook-Signature (HMAC-SHA256)
Body: JSON payload above

CRITICAL NOTE: No 'id' parameter exists in this payload!

STEP 3: TPS10-21 Webhook Receives Request (tps10-21.py)
--------------------------------------------------------
Location: GCSplit10-21/tps10-21.py:541-594
Function: payment_split_webhook()

Payload Received (lines 548-567):
- Raw payload extracted for signature verification
- JSON parsed into webhook_data dictionary
- Contains: user_id, closed_channel_id, wallet_address, payout_currency, sub_price
- NO 'id' field present

Processing Function Called (line 572):
result = process_payment_split(webhook_data)

STEP 4: Payment Split Processing (tps10-21.py)
-----------------------------------------------
Location: GCSplit10-21/tps10-21.py:404-539
Function: process_payment_split()

Data Extraction (lines 416-420):
user_id = webhook_data.get('user_id')
closed_channel_id = webhook_data.get('closed_channel_id')
wallet_address = webhook_data.get('wallet_address')
payout_currency = webhook_data.get('payout_currency')
sub_price = webhook_data.get('subscription_price') or webhook_data.get('sub_price')

Sub-Step 4.1: Get Estimated Conversion (lines 451-458)
estimate_data = get_estimated_conversion_and_save(...)

This function:
1. Calculates adjusted amount (after TP flat fee)
2. Looks up network from database
3. Calls ChangeNow API v2 /exchange/estimated-amount
4. Inserts to split_payout_request table with generated unique_id
5. Returns estimate_data dictionary

estimate_data contains:
{
    "unique_id": "ABCD1234EF567890",    # GENERATED by database_manager
    "from_amount": 1.99,                # FROM: ChangeNow estimate response
    "to_amount": 0.0003019,             # FROM: ChangeNow estimate response
    "from_currency": "usdt",
    "to_currency": "eth",
    ...
}

Sub-Step 4.2: Create Fixed-Rate Transaction (lines 489-499)
transaction = create_fixed_rate_transaction(
    to_amount=float(estimate_data['to_amount']),
    from_currency="eth",
    to_currency=payout_currency,
    wallet_address=wallet_address,
    user_id=user_id,
    unique_id=estimate_data['unique_id'],    # LOCAL DATABASE ID, NOT CHANGENOW ID
    closed_channel_id=str(closed_channel_id),
    from_network="eth",
    to_network="eth"
)

CRITICAL: The 'unique_id' passed here is from OUR database, NOT from ChangeNow

STEP 5: Create Fixed-Rate Transaction (tps10-21.py)
----------------------------------------------------
Location: GCSplit10-21/tps10-21.py:139-256
Function: create_fixed_rate_transaction()

Parameters Received:
- to_amount: float (from estimate)
- from_currency: "eth"
- to_currency: payout_currency (e.g., "link", "usdt")
- wallet_address: client wallet
- user_id: Telegram user ID (integer)
- unique_id: Our database unique_id (16-char alphanumeric) ‚Üê NOT CHANGENOW ID
- closed_channel_id: Channel ID
- from_network: "eth"
- to_network: "eth"

ChangeNow Client Call (lines 168-174):
transaction = changenow_client.create_fixed_rate_transaction(
    from_currency=from_currency,
    to_currency=to_currency,
    from_amount=to_amount,
    address=wallet_address,
    user_id=str(user_id)    # Passed as STRING of Telegram user ID
)

STEP 6: ChangeNow Client API Call (changenow_client.py)
--------------------------------------------------------
Location: GCSplit10-21/changenow_client.py:282-348
Function: create_fixed_rate_transaction()

Parameters Received:
- from_currency: Source currency
- to_currency: Target currency
- from_amount: Amount to exchange
- address: Recipient wallet address
- user_id: Telegram user ID as string (e.g., "1234567890")
- rate_id: None

Transaction Data Prepared (lines 304-322):
transaction_data = {
    "fromCurrency": from_currency.lower(),
    "toCurrency": to_currency.lower(),
    "fromNetwork": from_currency.lower(),
    "toNetwork": to_currency.lower(),
    "fromAmount": str(from_amount),
    "toAmount": "",
    "address": address,
    "extraId": "",
    "refundAddress": "",
    "refundExtraId": "",
    "userId": user_id if user_id else "",    # ‚Üê Telegram user_id passed here
    "payload": "",
    "contactEmail": "",
    "source": "",
    "flow": "standard",
    "type": "direct",
    "rateId": rate_id if rate_id else ""
}

CRITICAL OBSERVATION:
NO 'id' FIELD EXISTS IN THE REQUEST PAYLOAD!
The 'userId' field contains our Telegram user_id, NOT a transaction ID.

API Request (line 327):
response = self._make_request('POST', '/exchange', data=transaction_data, use_v2=True)

This sends:
POST https://api.changenow.io/v2/exchange
Headers:
  x-changenow-api-key: YOUR_API_KEY
  Content-Type: application/json
Body: transaction_data (as shown above)

================================================================================
üéØ THE CRITICAL MOMENT: WHERE 'ID' IS BORN
================================================================================

Location: GCSplit10-21/changenow_client.py:329-341
After API Call Response Processing:

if response:
    transaction_id = response.get('id', 'Unknown')     # ‚Üê 'id' APPEARS HERE!
    payin_address = response.get('payinAddress', 'Unknown')
    to_amount = response.get('toAmount', 'Unknown')
    from_curr = response.get('fromCurrency', from_currency).upper()
    to_curr = response.get('toCurrency', to_currency).upper()

SOURCE OF 'ID':
---------------
The 'id' parameter is EXTRACTED FROM THE CHANGENOW API RESPONSE.
It is NOT sent TO ChangeNow - it is RETURNED BY ChangeNow.

ChangeNow API Response Structure (Example):
{
    "id": "abc123xyz789",                    # ‚Üê GENERATED BY CHANGENOW
    "payinAddress": "0x1234...",
    "payinExtraId": null,
    "payoutAddress": "0xabcd...",
    "payoutExtraId": null,
    "fromCurrency": "eth",
    "toCurrency": "link",
    "fromNetwork": "eth",
    "toNetwork": "eth",
    "fromAmount": 0.5,
    "toAmount": 100.25,
    "flow": "standard",
    "type": "direct",
    "status": "new",
    "refundAddress": "",
    "refundExtraId": "",
    "validUntil": "2025-10-18T12:00:00.000Z",
    "rateId": null,
    "userId": "1234567890"                    # ‚Üê OUR TELEGRAM USER_ID
}

================================================================================
STEP 7: Response Processing (tps10-21.py)
================================================================================

Location: GCSplit10-21/tps10-21.py:176-249
After create_fixed_rate_transaction() returns:

if transaction:
    transaction_id = transaction.get('id', 'Unknown')         # ‚Üê EXTRACTED FROM RESPONSE
    payin_address = transaction.get('payinAddress', 'Unknown')
    payin_extra_id = transaction.get('payinExtraId', '')
    expected_amount = transaction.get('fromAmount', '')

Print Statements (lines 182-199):
- Transaction ID logged: transaction.get('id')
- This is the ChangeNow-generated transaction ID
- Used for tracking the conversion transaction

Database Insertion (lines 202-245):
The ChangeNow response fields are extracted and saved to split_payout_que:
- api_from_amount = transaction.get('fromAmount', 0)
- api_to_amount = transaction.get('toAmount', 0)
- api_from_currency = transaction.get('fromCurrency')
- api_to_currency = transaction.get('toCurrency')
- api_payin_address = transaction.get('payinAddress', '')
- api_payout_address = transaction.get('payoutAddress', wallet_address)
- etc.

NOTE: The ChangeNow transaction 'id' is NOT explicitly saved to the database
      in the current implementation. It's only logged.

================================================================================
STEP 8: Final Response (tps10-21.py)
================================================================================

Location: GCSplit10-21/tps10-21.py:518-526
Function: process_payment_split() return value

return {
    "success": True,
    "transaction_id": transaction.get('id'),      # ‚Üê CHANGENOW-GENERATED ID
    "payin_address": transaction.get('payinAddress'),
    "payin_extra_id": transaction.get('payinExtraId'),
    "expected_amount": transaction.get('fromAmount'),
    "currency": "ETH",
    "estimate_data": estimate_data
}

This response is sent back to tph10-16 as the webhook response.

================================================================================
SUMMARY: COMPLETE ID JOURNEY
================================================================================

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 1. User Payment Success ‚Üí tph10-16 receives token                      ‚îÇ
‚îÇ    ‚Üì                                                                    ‚îÇ
‚îÇ 2. Token decoded ‚Üí Extract user_id (Telegram ID: 1234567890)           ‚îÇ
‚îÇ    ‚Üì                                                                    ‚îÇ
‚îÇ 3. Webhook sent to tps10-21 with user_id in payload                    ‚îÇ
‚îÇ    ‚Üì                                                                    ‚îÇ
‚îÇ 4. tps10-21 creates estimate ‚Üí Generates unique_id (ABCD1234...)       ‚îÇ
‚îÇ    ‚Üì                                                                    ‚îÇ
‚îÇ 5. unique_id saved to split_payout_request table                       ‚îÇ
‚îÇ    ‚Üì                                                                    ‚îÇ
‚îÇ 6. ChangeNow API called with:                                          ‚îÇ
‚îÇ    - userId = "1234567890" (Telegram user_id)                          ‚îÇ
‚îÇ    - NO 'id' field in request                                          ‚îÇ
‚îÇ    ‚Üì                                                                    ‚îÇ
‚îÇ 7. ‚ö° CHANGENOW GENERATES TRANSACTION ID ‚ö°                             ‚îÇ
‚îÇ    ‚Üì                                                                    ‚îÇ
‚îÇ 8. ChangeNow returns response with:                                    ‚îÇ
‚îÇ    - id: "abc123xyz789" (NEW - generated by ChangeNow)                 ‚îÇ
‚îÇ    - userId: "1234567890" (echo of what we sent)                       ‚îÇ
‚îÇ    - payinAddress, fromAmount, toAmount, etc.                          ‚îÇ
‚îÇ    ‚Üì                                                                    ‚îÇ
‚îÇ 9. Response processed and 'id' extracted                               ‚îÇ
‚îÇ    ‚Üì                                                                    ‚îÇ
‚îÇ 10. ChangeNow transaction data (including 'id') saved to               ‚îÇ
‚îÇ     split_payout_que table with our unique_id for linking              ‚îÇ
‚îÇ    ‚Üì                                                                    ‚îÇ
‚îÇ 11. Transaction ID returned in final webhook response                  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

================================================================================
KEY FINDINGS
================================================================================

1. 'ID' GENERATION:
   - The 'id' parameter is GENERATED BY CHANGENOW API
   - It is NOT created by our codebase
   - It appears for the FIRST TIME in the API response from ChangeNow

2. TWO DIFFERENT IDs IN PLAY:

   A. Our Database unique_id (Lines tps10-21.py:364, database_manager.py:225-238)
      - Format: 16-character alphanumeric (e.g., "ABCD1234EF567890")
      - Generated by: database_manager.generate_unique_id()
      - Purpose: Link split_payout_request and split_payout_que tables
      - Stored in: Both database tables
      - Created: BEFORE ChangeNow API call

   B. ChangeNow transaction_id (Returned by API)
      - Format: Variable-length string (ChangeNow's internal format)
      - Generated by: ChangeNow API server
      - Purpose: Track transaction on ChangeNow platform
      - Stored in: Currently only logged, NOT saved to database
      - Created: DURING ChangeNow API call (server-side)

3. userId FIELD CONFUSION:
   - The 'userId' field in ChangeNow request contains our Telegram user_id
   - This is a STRING representation of the user's Telegram ID
   - Format: "1234567890" (Telegram user ID converted to string)
   - This is NOT related to ChangeNow's transaction 'id'

4. CURRENT LIMITATION:
   - The ChangeNow transaction 'id' is extracted and logged
   - It is returned in the webhook response
   - It is NOT currently saved to any database table
   - Recommendation: Consider adding a 'changenow_transaction_id' column
     to split_payout_que table for future transaction tracking

================================================================================
CODE LOCATIONS REFERENCE
================================================================================

'id' First Appearance:
  File: GCSplit10-21/changenow_client.py
  Line: 330
  Code: transaction_id = response.get('id', 'Unknown')

'id' Extraction Points:
  1. changenow_client.py:330 - In create_fixed_rate_transaction()
  2. tps10-21.py:177 - In create_fixed_rate_transaction()
  3. tps10-21.py:520 - In process_payment_split() return

'id' Logging Points:
  1. changenow_client.py:337 - "Transaction ID: {transaction_id}"
  2. tps10-21.py:183 - "Transaction ID: {transaction_id}"
  3. tps10-21.py:198 - "Transaction ID: {transaction_id}"

API Request Preparation:
  File: GCSplit10-21/changenow_client.py
  Lines: 304-322
  Note: NO 'id' field in request payload

API Call Execution:
  File: GCSplit10-21/changenow_client.py
  Line: 327
  Endpoint: POST /v2/exchange

Response Processing:
  File: GCSplit10-21/changenow_client.py
  Lines: 329-341

Our unique_id Generation:
  File: GCSplit10-21/database_manager.py
  Lines: 225-238
  Function: generate_unique_id()

Our unique_id Usage:
  File: GCSplit10-21/tps10-21.py
  Line: 364 - Returned from get_estimated_conversion_and_save()
  Line: 495 - Passed to create_fixed_rate_transaction()
  Line: 221 - Passed to database insert

================================================================================
CONCLUSION
================================================================================

The 'id' parameter in ChangeNow API responses is:

‚úÖ GENERATED BY: ChangeNow API server (external service)
‚úÖ RETURNED IN: POST /v2/exchange response
‚úÖ FIRST APPEARS: After API call completes
‚úÖ PURPOSE: Unique identifier for the exchange transaction on ChangeNow platform
‚úÖ USAGE: Transaction tracking, status checks, customer reference

‚ùå NOT generated by our code
‚ùå NOT sent in the request to ChangeNow
‚ùå NOT related to our database unique_id
‚ùå NOT related to the userId field (which is Telegram user_id)

The 'id' is ChangeNow's internal transaction identifier, similar to how
NowPayments generates payment IDs or how Stripe generates charge IDs.

================================================================================
RELATED DOCUMENTATION
================================================================================

For more information, see:
- ENVIRONMENT_VARIABLES_ANALYSIS.txt (Environment configuration)
- SUCCESS_URL_FLOW_EXPLANATION.txt (Token generation and flow)
- GOOGLE_CLOUD_RUN_DEPLOYMENT.txt (Deployment instructions)

ChangeNow API Documentation:
- API v2 Endpoint: POST https://api.changenow.io/v2/exchange
- Documentation: https://documenter.getpostman.com/view/8180765/SVfTPnFu

================================================================================
END OF TRACE
================================================================================

Generated: October 2025
Version: 10-18
Purpose: Trace 'id' parameter source in ChangeNow API integration
Services: TPS10-21, ChangeNowClient

================================================================================
