================================================================================
SUCCESS_URL GENERATION AND FLOW EXPLANATION
TelegramFunnel Payment System - October 2025
================================================================================

This document provides a thorough explanation of how the success_url is generated,
what inputs it takes, and how it flows through the payment system.

================================================================================
TABLE OF CONTENTS
================================================================================
1. Overview
2. Complete Flow Diagram
3. Input Parameters Required
4. Step-by-Step Generation Process
5. Code Locations and Line Numbers
6. Example Success URL Breakdown
7. Troubleshooting Common Issues

================================================================================
1. OVERVIEW
================================================================================

The success_url is a cryptographically signed URL that contains encrypted user
and subscription data. It is generated when a user initiates a payment and is
used by NowPayments to redirect the user after successful payment completion.

Purpose:
- Redirect users to the webhook handler (tph10-16) after payment
- Securely transmit payment/subscription data in the URL token
- Prevent URL tampering through HMAC-SHA256 signatures

Generated By: TelePay10-16 (telepay10-16.py)
Consumed By: GCWebhook10-16 (tph10-16.py)
Used In: NowPayments invoice payload as the redirect destination

================================================================================
2. COMPLETE FLOW DIAGRAM
================================================================================

User Action: Clicks subscription link or donation button
    ↓
[1] menu_handlers.py → start_bot() or handle_menu_selection()
    ↓ Parses token, sets global values
    ↓
[2] menu_handlers.py → payment_gateway_wrapper()
    ↓ Retrieves global_sub_value, global_open_channel_id, global_sub_time
    ↓
[3] start_np_gateway.py → start_np_gateway_new()
    ↓ Gets user_id from Telegram update
    ↓ Fetches closed_channel_id from database
    ↓ Fetches wallet_address and payout_currency from database
    ↓ Fetches channel titles and descriptions from database
    ↓
[4] secure_webhook.py → build_signed_success_url()
    ↓ Input: user_id, closed_channel_id, wallet_address, payout_currency,
    ↓        subscription_time, subscription_price
    ↓ Output: Cryptographically signed URL with token
    ↓
[5] start_np_gateway.py → start_payment_flow()
    ↓ Receives secure_success_url as parameter
    ↓
[6] start_np_gateway.py → create_payment_invoice()
    ↓ Embeds success_url in NowPayments invoice payload
    ↓ Sends to NowPayments API
    ↓
[7] NowPayments creates invoice
    ↓ User completes payment
    ↓ Redirects user to success_url
    ↓
[8] GCWebhook10-16 (tph10-16.py) receives request
    ↓ Decodes and verifies token
    ↓ Grants channel access
    ↓ Triggers payment splitting

================================================================================
3. INPUT PARAMETERS REQUIRED
================================================================================

To generate a success_url, the following inputs are required:

A. FROM USER/TELEGRAM:
   1. user_id (int)
      - Source: update.effective_user.id (from Telegram)
      - Example: 1234567890
      - Purpose: Identify the user making the payment

B. FROM DATABASE (main_clients_database):
   2. closed_channel_id (int)
      - Source: db_manager.fetch_closed_channel_id(open_channel_id)
      - Example: -1001234567891
      - Purpose: Channel to grant access to after payment

   3. client_wallet_address (str)
      - Source: db_manager.fetch_client_wallet_info(open_channel_id)
      - Example: "0xBc29Be20D4F90cF94f994cfADCf24742118C0Fe5"
      - Purpose: Destination wallet for payment splitting
      - Max Length: 110 characters

   4. client_payout_currency (str)
      - Source: db_manager.fetch_client_wallet_info(open_channel_id)
      - Example: "USDT"
      - Purpose: Currency for payment conversion
      - Max Length: 4 characters

C. FROM SUBSCRIPTION TOKEN/MENU:
   5. subscription_time (int)
      - Source: Parsed from token or menu_handlers.global_sub_time
      - Example: 30 (days)
      - Range: 1-999 days
      - Purpose: Subscription duration

   6. subscription_price (str)
      - Source: Parsed from token or menu_handlers.global_sub_value
      - Example: "25.00"
      - Purpose: Subscription price in USD
      - Max Length: 6 characters

D. FROM ENVIRONMENT:
   7. WEBHOOK_BASE_URL (str)
      - Source: os.getenv("WEBHOOK_BASE_URL")
      - Example: "https://tph10-16-291176869049.us-central1.run.app"
      - Purpose: Base URL for the webhook handler service
      - CRITICAL: Must point to tph10-16 service, NOT tph10-13

   8. SUCCESS_URL_SIGNING_KEY (str)
      - Source: Secret Manager via os.getenv("SUCCESS_URL_SIGNING_KEY")
      - Example: "your-secret-hmac-key-here"
      - Purpose: HMAC key for cryptographic signing
      - Security: Must match key in tph10-16 for verification

================================================================================
4. STEP-BY-STEP GENERATION PROCESS
================================================================================

STEP 1: User Initiates Payment
---------------------------------
Location: menu_handlers.py:73-186 (start_bot function)
Location: menu_handlers.py:28-45 (handle_menu_selection function)

Action: User clicks subscription link or donation button
Result:
  - Parses token to extract open_channel_id, sub_value, sub_time
  - Sets global values in menu_handlers
  - Triggers payment_gateway_wrapper

Example Token: "MTIzNDU2Nzg5MA_15d00_30"
  - MTIzNDU2Nzg5MA = base64 encoded open_channel_id
  - 15d00 = subscription price ($15.00, 'd' replaces '.')
  - 30 = subscription time in days


STEP 2: Payment Gateway Wrapper
---------------------------------
Location: app_initializer.py:66-81

Action: Retrieves global values from menu_handlers
Parameters Retrieved:
  - global_sub_value (float): e.g., 15.0
  - global_open_channel_id (str): e.g., "-1001234567890"
  - global_sub_time (int): e.g., 30

Calls: payment_manager.start_np_gateway_new()


STEP 3: start_np_gateway_new Function
---------------------------------------
Location: start_np_gateway.py:175-243

Action: Gathers all required data for success URL generation

Data Collection Steps:

3a. Extract user_id from Telegram update
    Code: user_id = self.get_telegram_user_id(update)
    Line: 182

3b. Fetch closed_channel_id from database
    Code: closed_channel_id = db_manager.fetch_closed_channel_id(global_open_channel_id)
    Line: 199

3c. Fetch wallet info from database
    Code: wallet_address, payout_currency = db_manager.fetch_client_wallet_info(global_open_channel_id)
    Line: 206

3d. Fetch channel display info from database
    Code: _, channel_info_map = db_manager.fetch_open_channel_list()
    Line: 210
    Code: closed_channel_title = channel_data.get("closed_channel_title", "Premium Channel")
    Line: 212

3e. Verify signing key is available
    Code: if not webhook_manager.signing_key
    Line: 217

Special Cases:
  - Donation Default: If global_open_channel_id == "donation_default"
    Uses placeholder values (lines 190-196)


STEP 4: build_signed_success_url Function
-------------------------------------------
Location: secure_webhook.py:58-154

This is the CORE function that generates the success_url.

Inputs (from start_np_gateway_new):
  user_id: 1234567890
  closed_channel_id: -1001234567891
  client_wallet_address: "0xBc29Be20D4F90cF94f994cfADCf24742118C0Fe5"
  client_payout_currency: "USDT"
  subscription_time: 30
  subscription_price: "15.00"

Process:

4a. Convert and validate IDs (lines 78-95)
    - Convert to integers if strings
    - Validate 48-bit range
    - Validate subscription time range (1-999)

4b. Normalize string inputs (lines 97-118)
    - Truncate wallet to 110 chars max
    - Truncate currency to 4 chars max
    - Truncate price to 6 chars max
    - Encode to UTF-8 bytes

4c. Create optimized 48-bit packing (lines 120-135)
    Structure:
    - 6 bytes: user_id (48-bit)
    - 6 bytes: closed_channel_id (48-bit)
    - 2 bytes: timestamp_minutes (current time % 65536)
    - 2 bytes: subscription_time
    - 1 byte: price_length + N bytes price
    - 1 byte: wallet_length + M bytes wallet
    - 1 byte: currency_length + P bytes currency

4d. Generate HMAC signature (lines 137-139)
    - Use signing key from environment/Secret Manager
    - Create HMAC-SHA256 of packed data
    - Truncate to first 16 bytes for compactness

4e. Combine and encode (lines 141-145)
    - Combine packed data + signature
    - Base64 URL-safe encode
    - Strip padding characters ('=')

4f. Build complete URL (line 148)
    **CRITICAL LINE:**
    success_url = f"{self.base_url}?token={token}"

    Where self.base_url comes from:
    - Line 21: self.base_url = base_url or os.getenv("WEBHOOK_BASE_URL")

    **THIS IS WHERE tph10-13 vs tph10-16 MISMATCH OCCURS**

Output Example:
https://tph10-16-291176869049.us-central1.run.app?token=AAF1zgB__xabvrpEwbsAAwMzLjMqMHhCYzI5QmUyMEQ0RjkwY0Y5NGY5OTRjZkFEQ2YyNDc0MjExOEMwRmU1BExJTktazGPOKtO6IHh0n695qBeK


STEP 5: start_payment_flow Function
-------------------------------------
Location: start_np_gateway.py:106-173

Action: Uses the generated secure_success_url to create NowPayments invoice

Receives: secure_success_url (as parameter from start_np_gateway_new)
Line: 108

Passes to: create_payment_invoice()
Line: 135-140


STEP 6: create_payment_invoice Function
-----------------------------------------
Location: start_np_gateway.py:33-88

Action: Creates NowPayments invoice with success_url embedded

Invoice Payload Structure (lines 49-57):
{
    "price_amount": 15.0,
    "price_currency": "USD",
    "order_id": "PGP-1234567890-1001234567890",
    "order_description": "Payment-Test-1",
    "success_url": "https://tph10-16-291176869049.us-central1.run.app?token=...",
    "is_fixed_rate": False,
    "is_fee_paid_by_user": False
}

**Line 54 is where success_url is embedded in the NowPayments invoice**

API Call: POST to https://api.nowpayments.io/v1/invoice
Line: 66-70

Result:
  - NowPayments creates invoice
  - Returns invoice_url for user to complete payment
  - Stores success_url to redirect after payment completion

================================================================================
5. CODE LOCATIONS AND LINE NUMBERS
================================================================================

File: secure_webhook.py
-----------------------
Line 21:  self.base_url = base_url or os.getenv("WEBHOOK_BASE_URL")
          ↑ WEBHOOK_BASE_URL environment variable is read here

Line 148: success_url = f"{self.base_url}?token={token}"
          ↑ Complete success URL is constructed here

File: start_np_gateway.py
--------------------------
Line 54:  "success_url": success_url,
          ↑ success_url embedded in NowPayments invoice payload

Line 135-140: invoice_result = await self.create_payment_invoice(
                  user_id=user_id,
                  amount=sub_value,
                  success_url=secure_success_url,  ← success_url passed here
                  order_id=order_id
              )

Line 224-231: secure_success_url = webhook_manager.build_signed_success_url(
                  user_id=user_id,
                  closed_channel_id=closed_channel_id,
                  client_wallet_address=wallet_address or "",
                  client_payout_currency=payout_currency or "",
                  subscription_time=global_sub_time,
                  subscription_price=str(global_sub_value)
              )
              ↑ success_url is generated here

File: app_initializer.py
-------------------------
Line 74-80: await self.payment_manager.start_np_gateway_new(
                update, context,
                global_values['sub_value'],
                global_values['open_channel_id'],
                global_values['sub_time'],
                self.webhook_manager,
                self.db_manager
            )
            ↑ webhook_manager is passed to payment flow

Line 53: self.webhook_manager = SecureWebhookManager()
         ↑ webhook_manager is initialized (reads WEBHOOK_BASE_URL)

File: database.py
-----------------
Line 125-151: fetch_closed_channel_id() - Gets closed_channel_id from database
Line 153-185: fetch_client_wallet_info() - Gets wallet_address and payout_currency

================================================================================
6. EXAMPLE SUCCESS URL BREAKDOWN
================================================================================

Example URL:
https://tph10-16-291176869049.us-central1.run.app?token=AAF1zgB__xabvrpEwbsAAwMzLjMqMHhCYzI5QmUyMEQ0RjkwY0Y5NGY5OTRjZkFEQ2YyNDc0MjExOEMwRmU1BExJTktazGPOKtO6IHh0n695qBeK

Components:
-----------
1. Base URL: https://tph10-16-291176869049.us-central1.run.app
   - From: WEBHOOK_BASE_URL environment variable
   - Should be: tph10-16 service URL
   - Common Issue: Points to old tph10-13 URL

2. Query Parameter: ?token=...
   - Separator between base URL and token

3. Token: AAF1zgB__xabvrpEwbsAAwMzLjMqMHhCYzI5QmUyMEQ0RjkwY0Y5NGY5OTRjZkFEQ2YyNDc0MjExOEMwRmU1BExJTktazGPOKtO6IHh0n695qBeK
   - Base64 URL-safe encoded
   - Contains encrypted payload + signature
   - Cannot be manually decoded without signing key

Token Contents (when decoded by tph10-16.py):
- user_id: 1234567890
- closed_channel_id: -1001234567891
- wallet_address: "0xBc29Be20D4F90cF94f994cfADCf24742118C0Fe5"
- payout_currency: "USDT"
- subscription_time: 30
- subscription_price: "25.00"
- timestamp_minutes: 12345 (for expiration validation)
- HMAC signature: first 16 bytes for verification

================================================================================
7. TROUBLESHOOTING COMMON ISSUES
================================================================================

ISSUE 1: Success URL points to tph10-13 instead of tph10-16
-------------------------------------------------------------
Symptom: Generated URL is https://tph10-13-291176869049.us-central1.run.app

Root Cause:
  - WEBHOOK_BASE_URL environment variable on deployed telepay10-16 service
    still points to old tph10-13 URL

Location: secure_webhook.py:21
Code: self.base_url = base_url or os.getenv("WEBHOOK_BASE_URL")

Fix:
  Update the environment variable on deployed Cloud Run service:

  gcloud run services update telepay10-16 \
      --region us-central1 \
      --update-env-vars WEBHOOK_BASE_URL=https://tph10-16-291176869049.us-central1.run.app

Verification:
  - Check logs for "✅ [DEBUG] Complete success URL generated:"
  - Verify URL contains tph10-16, not tph10-13


ISSUE 2: Token verification fails on tph10-16
---------------------------------------------
Symptom: "Signature mismatch" error in tph10-16 logs

Root Cause:
  - SUCCESS_URL_SIGNING_KEY differs between telepay10-16 and tph10-16

Fix:
  Ensure both services use the same signing key from Secret Manager:

  # For telepay10-16:
  SUCCESS_URL_SIGNING_KEY=projects/PROJECT_ID/secrets/SUCCESS_URL_SIGNING_KEY/versions/latest

  # For tph10-16:
  SUCCESS_URL_SIGNING_KEY=projects/PROJECT_ID/secrets/SUCCESS_URL_SIGNING_KEY/versions/latest


ISSUE 3: "Invalid token: too small" error
------------------------------------------
Symptom: Token decoding fails in tph10-16

Root Cause:
  - Missing data in token generation
  - Wallet address or currency not properly fetched from database

Fix:
  - Verify database query returns wallet_address and payout_currency
  - Check logs for "💰 [DEBUG] Retrieved wallet info"
  - Ensure main_clients_database table has correct data


ISSUE 4: "Token expired or not yet valid" error
------------------------------------------------
Symptom: Valid token rejected by tph10-16

Root Cause:
  - Time drift between services
  - Token older than 2 hours

Fix:
  - Check system clocks are synchronized
  - Reduce time between payment initiation and completion
  - Token valid window: current_time - 7200 to current_time + 300 seconds


ISSUE 5: Missing user_id in success URL
----------------------------------------
Symptom: "Could not determine user ID" error

Root Cause:
  - update.effective_user is None
  - Telegram update object malformed

Fix:
  - Verify bot has proper permissions
  - Check that payment flow is triggered by actual user interaction
  - Review get_telegram_user_id() logic in start_np_gateway.py:90-104

================================================================================
8. ENVIRONMENT VARIABLE DEPENDENCIES
================================================================================

The success_url generation depends on these environment variables:

Required Environment Variables:
--------------------------------
1. WEBHOOK_BASE_URL
   - Type: Direct value (not Secret Manager)
   - Example: https://tph10-16-291176869049.us-central1.run.app
   - Used by: secure_webhook.py:21
   - Service: telepay10-16
   - CRITICAL: Must be set correctly for proper redirection

2. SUCCESS_URL_SIGNING_KEY
   - Type: Secret Manager path
   - Example: projects/PROJECT_ID/secrets/SUCCESS_URL_SIGNING_KEY/versions/latest
   - Used by: secure_webhook.py:29
   - Service: telepay10-16 AND tph10-16 (must match)
   - Purpose: HMAC signature generation/verification

3. DATABASE_HOST_SECRET
4. DATABASE_NAME_SECRET
5. DATABASE_USER_SECRET
6. DATABASE_PASSWORD_SECRET
   - Type: Secret Manager paths
   - Used by: database.py (to fetch closed_channel_id and wallet info)
   - Service: telepay10-16

Deployment Checklist:
---------------------
☐ WEBHOOK_BASE_URL points to current tph10-16 service (not tph10-13)
☐ SUCCESS_URL_SIGNING_KEY is identical in telepay10-16 and tph10-16
☐ Database credentials are valid and accessible
☐ main_clients_database has wallet_address and payout_currency populated
☐ Bot has admin permissions in target channels

================================================================================
9. SUMMARY
================================================================================

The success_url is generated through a multi-step process that:

1. Starts when user initiates payment
2. Collects data from:
   - Telegram update (user_id)
   - Database (closed_channel_id, wallet_address, payout_currency)
   - Subscription token (subscription_time, subscription_price)
   - Environment (WEBHOOK_BASE_URL, signing key)

3. Builds a cryptographically signed token containing:
   - User identification data
   - Channel access data
   - Payment splitting data
   - Timestamp for expiration validation
   - HMAC signature for tamper prevention

4. Embeds the URL in NowPayments invoice

5. Redirects user after payment to tph10-16 webhook handler

**CRITICAL POINT:**
The base URL comes from the WEBHOOK_BASE_URL environment variable.
If this points to tph10-13 instead of tph10-16, all generated URLs
will be incorrect, causing payment redirects to fail.

**FIX:**
Update WEBHOOK_BASE_URL on the deployed telepay10-16 Cloud Run service
to point to https://tph10-16-291176869049.us-central1.run.app

================================================================================
END OF DOCUMENT
================================================================================

Generated: October 2025
Version: 10-16
For: TelegramFunnel Payment System
Related Files:
  - secure_webhook.py (token generation)
  - start_np_gateway.py (payment flow)
  - tph10-16.py (token verification)

For deployment instructions, see:
  - GOOGLE_CLOUD_RUN_DEPLOYMENT.txt
  - TELEPAY10-16_ENVIRONMENT_VARIABLES.txt

================================================================================
